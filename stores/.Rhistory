tiene_terraza)
)
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(is.na(tiene_terraza)== T,
str_extract(string = house_union$description,
pattern = p7),
tiene_terraza)
)
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(is.na(tiene_terraza)== T,
str_extract(string = house_union$description,
pattern = p8),
tiene_terraza)
)
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(is.na(tiene_terraza)== T,
str_extract(string = house_union$description,
pattern = p9),
tiene_terraza)
)
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(is.na(tiene_terraza)== T,
str_extract(string = house_union$description,
pattern = p10),
tiene_terraza)
)
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(is.na(tiene_terraza)== T,
str_extract(string = house_union$description,
pattern = p11),
tiene_terraza)
)
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(is.na(tiene_terraza)== T,
str_extract(string = house_union$description,
pattern = p12),
tiene_terraza)
)
table(is.na(house_union$tiene_terraza))
house_union$tiene_terraza[is.na(house_union$tiene_terraza)] <- 0
house_union <- house_union %>%
mutate(tiene_terraza = ifelse(tiene_terraza!=0,
1,
tiene_terraza)
)
# Crear variable garaje a partir de descripcion
p1 = "[:space:]+garaje+[:space:]"
p2 = "[:punct:]+garaje"
p3 = "[:punct:]+parqueadero[:space:]"
p4 = "[:space:]+parqueadero+[:space:]"
p5 = "[:punct:]+parqueadero"
p6 = "[:punct:]+deposito+[:space:]"
p7 = "[:space:]+deposito+[:space:]"
p8 = "[:punct:]+deposito"
p9 = "[:punct:]+parqueaderos[:space:]"
p10 = "[:space:]+parqueaderos+[:space:]"
p11 = "[:punct:]+parqueaderos"
p12 = "[:space:]+garajes+[:space:]"
p12 = "[:punct:]+garajes"
house_union$garaje <- NA
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p1),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p2),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p3),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p4),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p5),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p6),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p6),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p7),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p8),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p9),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p10),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p11),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p12),
garaje)
)
house_union <- house_union %>%
mutate(garaje = ifelse(is.na(garaje)== T,
str_extract(string = house_union$description,
pattern = p13),
garaje)
)
# Crear variable tiene_garaje
table(is.na(house_union$garaje))
house_union$garaje[is.na(house_union$garaje)] <- 0
house_union <- house_union %>%
mutate(garaje = ifelse(garaje!=0,
1,
garaje)
) %>%
mutate(tiene_garaje=garaje)
house_union <- house_union %>% select(-ad_type, -start_date, -end_date,
-created_on, -l1, -l2, -surface_covered
,-currency,-title, -description
,-operation_type,-garaje)
# Arreglar formatos de variables imputadas
# Surface
house_union <- house_union %>%
mutate(surface_total = gsub('m2', '', house_union$surface_total))
house_union <- house_union %>%
mutate(surface_total = gsub('mts2', '', house_union$surface_total))
house_union <- house_union %>%
mutate(surface_total = gsub('mts 2', '', house_union$surface_total))
house_union <- house_union %>%
mutate(surface_total = gsub('metros', '', house_union$surface_total))
house_union <- house_union %>%
mutate(surface_total = gsub('mt2', '', house_union$surface_total))
house_union <- house_union %>%
mutate(surface_total = gsub('mt', '', house_union$surface_total))
house_union <- house_union %>%
mutate(surface_total = gsub(',', '.', house_union$surface_total))
surface_total_2 <- regmatches(house_union$surface_total,
gregexpr(paste0("[[:digit:]]+","|","[[:digit:]]+[[:punct:]]+[[:digit:]]+"), house_union$surface_total))
house_union$surface <- surface_total_2
house_union <- house_union %>%
mutate(surface = ifelse(surface == 'character(0)',
NA,
surface)
)
house_union <- house_union %>% select(-surface_total)
house_union$surface <- as.numeric(house_union$surface)
table(is.na(house_union$surface))
# Baños
house_union <- house_union %>%
mutate(bathrooms = gsub('con baño', '1', house_union$bathrooms))
house_union <- house_union %>%
mutate(bathrooms = gsub('un baño', '1', house_union$bathrooms))
house_union <- house_union %>%
mutate(bathrooms = gsub('dos baños', '2', house_union$bathrooms))
bathrooms_2 <- regmatches(house_union$bathrooms,
gregexpr("[[:digit:]]+", house_union$bathrooms))
house_union$bathrooms_2 <- bathrooms_2
house_union <- house_union %>%
mutate(n_bathrooms = ifelse(bathrooms_2 == 'character(0)',
NA,
bathrooms_2)
)
house_union <- house_union %>% select(-bathrooms_2, -bathrooms)
house_union$n_bathrooms <- as.numeric(house_union$n_bathrooms)
#cambiar NAs en baños por 1 (asumiendo que todos los apartamentos tienen al menos 1 baño)
pob_house <- pob_house%>%
mutate(n_bathrooms = ifelse(is.na(n_bathrooms )== T,
1,
n_bathrooms )
)
house_med <- pob_house%>%
mutate(n_bathrooms = ifelse(is.na(n_bathrooms )== T,
1,
n_bathrooms )
)
pob_house_mnz <- pob_house_mnz%>%
mutate(n_bathrooms = ifelse(is.na(n_bathrooms )== T,
1,
n_bathrooms )
)
pob_house_mnz <- pob_house_mnz%>%
mutate(n_bathrooms = ifelse(is.na(n_bathrooms )== T,
1,
n_bathrooms )
)
# Dicotomizar tipo de propiedad
house_union <- house_union %>%
mutate(es_casa = ifelse(property_type == 'Casa',
1,
0)
)
house_union <- house_union %>% select(-property_type)
# Separar bogotá y medellín
house_bog <- house_union %>% filter(l3 == 'Bogotá D.C')
house_med <- house_union %>% filter(l3 == 'Medellín')
# Separar test y train
house_test <- house_union %>% filter(base == 'TEST')
house_train <- house_union %>% filter(base == 'TRAIN')
house_test <- house_test %>% select(-base)
house_train <- house_train %>% select(-base)
house_train$price <- house_train_price
house_test_bog <- house_test %>% filter(l3 == 'Bogotá D.C')
house_test_med <- house_test %>% filter(l3 == 'Medellín')
house_train_bog <- house_train %>% filter(l3 == 'Bogotá D.C')
house_train_med <- house_train %>% filter(l3 == 'Medellín')
house_test_bog <- house_test_bog %>% select(-l3)
house_test_med <- house_test_med %>% select(-l3)
house_train_bog <- house_train_bog %>% select(-l3)
house_train_med <- house_train_med %>% select(-l3)
# Exportar bog y med train y test
write.csv(house_test_bog ,"house_test_bog")
write.csv(house_test_med ,"house_test_med")
write.csv(house_train_bog ,"house_train_bog")
write.csv(house_train_med ,"house_train_med")
# Exportar train y test
write.csv(house_test ,"house_test")
write.csv(house_train ,"house_train")
#------ Datos externos ---------
#Importar datos de manzanas en Bogotá y Medellín
#mnz_bog = st_read("MGN_URB_MANZANA.shp") #importar archivo con capa de manzanas
#setwd('C:/Users/Sofia/Documents/2022-2/BigData/PS3_Gomez-Ortiz-Vanegas-/stores') #direccionar a carpeta descargada
#saveRDS(mnz_bog, "mnz_bog.rds")
#* Se borró el archivo pesado y se dejó el archivo rds
mnz_bog = import("C:/Users/Sofia/Documents/2022-2/BigData/PS3_Gomez-Ortiz-Vanegas-/stores/mnz_bog.rds")
colnames(mnz_bog)
#setwd('C:/Users/Sofia/Documents/2022-2/BigData/PS3_Gomez-Ortiz-Vanegas-/stores/05_ANTIOQUIA/URBANO') #direccionar a carpeta descargada
#mnz_med = st_read("MGN_URB_MANZANA.shp") #importar archivo con capa de manzanas (ya no se usa este sino su verión liviana)
##exportar manzanas medellín en formato más liviano - usamos ese de ahí en adelante
#setwd('C:/Users/Sofia/Documents/2022-2/BigData/PS3_Gomez-Ortiz-Vanegas-/stores') #direccionar a carpeta descargada
#saveRDS(mnz_med, "mnz_med.rds")
#* Se borró el archivo pesado y se dejó el archivo rds
mnz_med = import("C:/Users/Sofia/Documents/2022-2/BigData/PS3_Gomez-Ortiz-Vanegas-/stores/mnz_med.rds")
colnames(mnz_med)
#definir polígono de chapinero
chapinero <- getbb(place_name = "UPZ Chapinero, Bogota",
featuretype = "boundary:administrative",
format_out = "sf_polygon") %>% .$multipolygon
#definir polígono de El Poblado
poblado <- getbb(place_name = "Comuna 14 - El Poblado",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
#definir polígono de Medellín
medellin <- getbb(place_name = "Medellín",
featuretype = "boundary:administrative",
format_out = "sf_polygon")
# limitar datos de manzanas al área de interés
#uniformar
house_train_bog = st_transform(house_train_bog, crs=4326)
house_test_bog = st_transform(house_test_bog, crs=4326)
house_train_med = st_transform(house_train_med, crs=4326)
house_test_med = st_transform(house_test_med, crs=4326)
#Manzanas y apartamentos limitados a chapinero y el poblado:
#chapinero
chapi_train <- house_train_bog[chapinero,]
chapi_test <- house_test_bog[chapinero,]
chapi_mnz <- mnz_bog[chapinero,]
leaflet() %>% addTiles() %>% addPolygons (data = chapinero, color="red")  %>% addCircles (data = chapi_test, color="green") %>% addCircles (data = chapi_train, color="purple")
#El Poblado - para medellín casi todos los datos de train se encuentran fuera del poblado, así que se usarán los datos de toda la ciudad
## Primera variable para bogotá y medellín: Crear variable "distancia mínima a las estaciones de transporte masivo"
## a partir de información externa (OSM)
# Importar datos de estaciones de transporte masivo en el área de interés
bus_bog = opq(bbox = st_bbox(chapi_mnz)) %>%
add_osm_feature(key = "amenity", value = "bus_station") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
bus_ant = opq(bbox = st_bbox(mnz_med)) %>%
add_osm_feature(key = "amenity", value = "bus_station") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
bus_med <- bus_ant[medellin,]
# Medir distancia de los apartamentos a las estaciones de transporte
dist_med_bus_train = st_distance(x = house_train_med, y = bus_med)
dist_med_bus_test = st_distance(x = house_test_med, y = bus_med)
dist_chapi_bus_train = st_distance(x = chapi_train, y = bus_bog)
dist_chapi_bus_test = st_distance(x = chapi_test, y = bus_bog)
# Medir la mínima distancia de los apartamentos a las estaciones de transporte
min_med_bus_train = apply(dist_med_bus_train , 1 , min)
min_med_bus_test = apply(dist_med_bus_test , 1 , min)
min__chapi_bus_train = apply(dist_chapi_bus_train , 1 , min)
min__chapi_bus_test = apply(dist_chapi_bus_test , 1 , min)
house_train_med$dist_med_bus = min_med_bus_train #juntar a bases disponibles
house_test_med$dist_med_bus = min_med_bus_test
chapi_train$dist_chapi_bus = min__chapi_bus_train
chapi_test$dist_chapi_bus = min__chapi_bus_test
## Segunda variable para bogotá: distancia mínima a los cerros orientales
osm1 = opq(bbox = getbb("Bogota")) %>%
add_osm_feature(key="natural" , value="peak")
class(osm1)
osm1_sf = osm1 %>% osmdata_sf()
osm1_sf
chapi_east = osm1_sf$osm_points %>% select(osm_id)
#distancia a los cerros
dist_east_train = st_distance(x = chapi_train, y = chapi_east)
dist_east_test = st_distance(x = chapi_test, y = chapi_east)
#distancia mínima
min_east_train = apply(dist_east_train , 1 , min)
min_east_test = apply(dist_east_test , 1 , min)
#juntar a bases disponibles (aptos y aptos + manzanas)
chapi_train$dist_east = min_east_train
chapi_test$dist_east = min_east_test
## Segunda variable para medellín: distancia mínima al campo de golf
osm2 = opq(bbox = getbb("Medellín")) %>%
add_osm_feature(key="leisure" , value="golf_course")
class(osm2)
osm2_sf = osm2 %>% osmdata_sf()
osm2_sf
pob_golf = osm2_sf$osm_polygons %>% select(osm_id)
dist_golf_train = st_distance(x = house_train_med, y = pob_golf)
dist_golf_test = st_distance(x = house_test_med, y = pob_golf)
#distancia mínima
min_golf_train = apply(dist_golf_train , 1 , min)
min_golf_test = apply(dist_golf_test , 1 , min)
#juntar a bases disponibles
house_train_med$dist_golf = min_golf_train
house_test_med$dist_golf = min_golf_test
#GRÁFICAS PARA DOCUMENTO (MOSTRANDO VARIABLES ESPACIALES DISPONIBLES)
#Bogotá
library (sp)
column1 <- cbind(c(4.6947,4.6201,4.6174,4.6805, 4.6947))
column2 <- cbind(c(-74.0664,-74.0803,-74.0058,-73.9917, -74.0664))
coords <- cbind(column2,column1)
oriente_bogota <- st_polygon(list(coords))
leaflet() %>% addTiles() %>% addPolygons (data = oriente_bogota, color="red")  %>% addPolygons (data = chapinero, color="green")
leaflet() %>% addTiles() %>% addPolygons (data = chapinero, color="red")  %>% addCircles (data = house_bog, color="green")
pob_cerros <- chapi_east[oriente_bogota,]
ggplot()+
geom_sf(data=pob_house, col = "black")+
geom_sf(data=bus_pob, col ="blue")+
geom_sf(data=pob_cerros, color="red")+
theme_bw()+
theme(axis.title=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size=6))
#Medellín
ggplot()+
geom_sf(data=house_med, col = "black")+
geom_sf(data=bus_med, col ="blue")+
geom_sf(data=pob_golf, color="red")+
theme_bw()+
theme(axis.title=element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size=6))
#-------------------- Modelo de predicción ------------------------------------
# ajustar formato bases
chapi_train <- as.data.frame(chapi_train)
house_train_med <- as.data.frame(house_train_med)
#st_geometry(chapi_train) = NULL
#st_geometry(house_train_med) = NULL
#st_geometry(house_train_med$price) = NULL
# Se van a analizar dos formas funcionales:
# Forma lineal
chapi_1 <- chapi_train$price ~ chapi_train$dist_east+chapi_train$dist_chapi_bus + chapi_train$bedrooms + chapi_train$tiene_terraza + chapi_train$tiene_garaje+ chapi_train$surface
med_1 <- house_train_med$price ~ house_train_med$dist_golf + house_train_med$dist_med_bus + house_train_med$bedrooms + house_train_med$tiene_terraza + house_train_med$tiene_garaje+ house_train_med$surface
# Forma cuadrática
chapi_train$dist_chapi_bus2 <- chapi_train$dist_east + chapi_train$dist_chapi_bus*chapi_train$dist_chapi_bus
chapi_train$dist_east2 <- chapi_train$dist_east*chapi_train$dist_east
chapi_train$surface2 <- chapi_train$surface*chapi_train$surface
house_train_med$dist_med_bus2 <- house_train_med$dist_med_bus*house_train_med$dist_med_bus
house_train_med$dist_golf2 <- house_train_med$dist_golf*house_train_med$dist_golf
house_train_med$surface2 <- house_train_med$surface*house_train_med$surface
chapi_2 <- chapi_train$price ~ chapi_train$dist_east2 + chapi_train$dist_chapi_bus2 + chapi_train$bedrooms + chapi_train$tiene_terraza + chapi_train$tiene_garaje+ chapi_train$surface2
med_2 <- house_train_med$price ~ house_train_med$dist_golf2 + house_train_med$dist_med_bus2 + house_train_med$bedrooms + house_train_med$tiene_terraza + house_train_med$tiene_garaje+ house_train_med$surface2
## chapinero
# Lineal
st_geometry(chapi_train$price) = NULL
chapi_train$price <-unlist(chapi_train$price)
lm_chapi1 <- lm(chapi_1, data=chapi_train)
pred_ols_chapi1 <- predict(lm_chapi1)
library(stargazer)
stargazer(lm_chapi1,type = "text",title = "Chapinero OLS", out = "chapi1.doc")
lm_chapi2 <- lm(chapi_2, data=chapi_train)
pred_ols_chapi2 <- predict(lm_chapi2)
stargazer(lm_chapi2,type = "text",title = "Chapinero OLS", out = "chapi2.doc")
summary(pred_ols_chapi1)
library(rpart)
rf_chapi1 <- rpart(chapi_1, data=chapi_train)
summary(rf_chapi1)
stargazer(rf_chapi1,type = "text",title = "Chapinero RF", out = "chapi3.doc")
printpc(rf_chapi1)
print(rf_chapi1)
rf_chapi1 <- rpart(chapi_1, data=chapi_train)
summary(rf_chapi1)
pred_ols_chapi1 <- predict(lm_chapi1)
mse <- (chapi_train$price - pred_ols_chapi1)^2
rf_chapi2 <- rpart(chapi_2, data=chapi_train)
summary(rf_chapi2)
rf_med1 <- rpart(med_1, data=house_train_med)
st_geometry(house_train_med$price) = NULL
house_train_med$price <-unlist(house_train_med$price)
rf_med1 <- rpart(med_1, data=house_train_med)
house_train_med$price <-unlist(house_train_med$price)
lm_med1 <- lm(med_1, data=house_train_med)
house_train_med$dist_golf <-unlist(house_train_med$dist_golf)
lm_med1 <- lm(med_1, data=house_train_med)
house_train_med <- as.data.frame(house_train_med)
lm_med1 <- lm(med_1, data=house_train_med)
View(house_train_med)
house_test_med$dist_golf = min_golf_test
#Manzanas y apartamentos limitados a chapinero y el poblado:
#chapinero
chapi_train <- house_train_bog[chapinero,]
chapi_test <- house_test_bog[chapinero,]
chapi_mnz <- mnz_bog[chapinero,]
leaflet() %>% addTiles() %>% addPolygons (data = chapinero, color="red")  %>% addCircles (data = chapi_test, color="green") %>% addCircles (data = chapi_train, color="purple")
#El Poblado - para medellín casi todos los datos de train se encuentran fuera del poblado, así que se usarán los datos de toda la ciudad
## Primera variable para bogotá y medellín: Crear variable "distancia mínima a las estaciones de transporte masivo"
## a partir de información externa (OSM)
# Importar datos de estaciones de transporte masivo en el área de interés
bus_bog = opq(bbox = st_bbox(chapi_mnz)) %>%
add_osm_feature(key = "amenity", value = "bus_station") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
bus_ant = opq(bbox = st_bbox(mnz_med)) %>%
add_osm_feature(key = "amenity", value = "bus_station") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
bus_med <- bus_ant[medellin,]
# Medir distancia de los apartamentos a las estaciones de transporte
dist_med_bus_train = st_distance(x = house_train_med, y = bus_med)
dist_med_bus_test = st_distance(x = house_test_med, y = bus_med)
dist_chapi_bus_train = st_distance(x = chapi_train, y = bus_bog)
dist_chapi_bus_test = st_distance(x = chapi_test, y = bus_bog)
# Medir la mínima distancia de los apartamentos a las estaciones de transporte
min_med_bus_train = apply(dist_med_bus_train , 1 , min)
min_med_bus_test = apply(dist_med_bus_test , 1 , min)
min__chapi_bus_train = apply(dist_chapi_bus_train , 1 , min)
min__chapi_bus_test = apply(dist_chapi_bus_test , 1 , min)
house_train_med$dist_med_bus = min_med_bus_train #juntar a bases disponibles
house_test_med$dist_med_bus = min_med_bus_test
chapi_train$dist_chapi_bus = min__chapi_bus_train
chapi_test$dist_chapi_bus = min__chapi_bus_test
## Segunda variable para bogotá: distancia mínima a los cerros orientales
osm1 = opq(bbox = getbb("Bogota")) %>%
add_osm_feature(key="natural" , value="peak")
class(osm1)
osm1_sf = osm1 %>% osmdata_sf()
osm1_sf
chapi_east = osm1_sf$osm_points %>% select(osm_id)
#distancia a los cerros
dist_east_train = st_distance(x = chapi_train, y = chapi_east)
dist_east_test = st_distance(x = chapi_test, y = chapi_east)
#distancia mínima
min_east_train = apply(dist_east_train , 1 , min)
min_east_test = apply(dist_east_test , 1 , min)
#juntar a bases disponibles (aptos y aptos + manzanas)
chapi_train$dist_east = min_east_train
chapi_test$dist_east = min_east_test
## Segunda variable para medellín: distancia mínima al campo de golf
osm2 = opq(bbox = getbb("Medellín")) %>%
add_osm_feature(key="leisure" , value="golf_course")
class(osm2)
osm2_sf = osm2 %>% osmdata_sf()
osm2_sf
pob_golf = osm2_sf$osm_polygons %>% select(osm_id)
dist_golf_train = st_distance(x = house_train_med, y = pob_golf)
dist_golf_test = st_distance(x = house_test_med, y = pob_golf)
#distancia mínima
min_golf_train = apply(dist_golf_train , 1 , min)
min_golf_test = apply(dist_golf_test , 1 , min)
#juntar a bases disponibles
house_train_med$dist_golf = min_golf_train
house_test_med$dist_golf = min_golf_test
house_train_bog = st_transform(house_train_bog, crs=4326)
house_test_bog = st_transform(house_test_bog, crs=4326)
house_train_med = st_transform(house_train_med, crs=4326)
house_test_med = st_transform(house_test_med, crs=4326)
chapi_train <- house_train_bog[chapinero,]
chapi_test <- house_test_bog[chapinero,]
chapi_mnz <- mnz_bog[chapinero,]
bus_bog = opq(bbox = st_bbox(chapi_mnz)) %>%
add_osm_feature(key = "amenity", value = "bus_station") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
bus_ant = opq(bbox = st_bbox(mnz_med)) %>%
add_osm_feature(key = "amenity", value = "bus_station") %>%
osmdata_sf() %>% .$osm_points %>% select(osm_id,name)
bus_med <- bus_ant[medellin,]
dist_med_bus_train = st_distance(x = house_train_med, y = bus_med)
